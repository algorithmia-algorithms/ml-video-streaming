<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <title>Algorithmia Video Streaming</title>
    <script src="https://cdn.jsdelivr.net/npm/hls.js@latest/dist/hls.min.js"></script>
    <style>
        * {
            font-family: "Nunito Sans", Helvetica, sans-serif;
        }
        body {
            background: url('https://cdn.algorithmia.com/static/images/footer-wave.cde2321.svg') no-repeat fixed bottom;
            background-size: 100% 80px;
        }
        h1 {
            color: #6b547b;
            font-size: 22pt;
            font-weight: normal;
            margin-top: 0;
        }
        .video-player {
            margin-top: 6%;
            margin-left: auto;
            margin-right: auto;
            width: 500px;
        }
    </style>
</head>
<body>
​
<img src="https://algorithmia.com/public/logos/algorithmia_logo.svg" title="Algorithmia">
<h1>Video streaming</h1>
​
<div class="video-player">
    <video id="video" width="500" height="400" controls></video>
</div>
​
<script>
    var video = document.getElementById('video');
    var videoSrc = "http://{{host}}/hls/streaming.m3u8";
    if (Hls.isSupported()) {
        var hls = new Hls();
        console.log("hls supported");
        hls.loadSource(videoSrc);
        hls.attachMedia(video);
        hls.on(Hls.Events.MANIFEST_PARSED, function() {
            video.play();
        });
    }
        // hls.js is not supported on platforms that do not have Media Source Extensions (MSE) enabled.
        // When the browser has built-in HLS support (check using `canPlayType`), we can provide an HLS manifest (i.e. .m3u8 URL) directly to the video element through the `src` property.
        // This is using the built-in support of the plain video element, without using hls.js.
        // Note: it would be more normal to wait on the 'canplay' event below however on Safari (where you are most likely to find built-in HLS support) the video.src URL must be on the user-driven
    // white-list before a 'canplay' event will be emitted; the last video event that can be reliably listened-for when the URL is not on the white-list is 'loadedmetadata'.
    else if (video.canPlayType('application/vnd.apple.mpegurl')) {
        video.src = videoSrc;
        console.log("hls mpegurl");
        video.addEventListener('loadedmetadata', function() {
            video.play();
        });
    }
    else {
        console.log("nothing was supported.")
    }
</script>
</body>
</html>